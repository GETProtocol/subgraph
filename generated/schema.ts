// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { TypedMap, Entity, Value, ValueKind, store, Address, Bytes, BigInt, BigDecimal } from "@graphprotocol/graph-ts";

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Protocol entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Protocol entity with non-string ID. " + 'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Protocol", id.toString(), this);
  }

  static load(id: string): Protocol | null {
    return store.get("Protocol", id) as Protocol | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get getUsed(): BigInt {
    let value = this.get("getUsed");
    return value.toBigInt();
  }

  set getUsed(value: BigInt) {
    this.set("getUsed", Value.fromBigInt(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get scanCount(): BigInt {
    let value = this.get("scanCount");
    return value.toBigInt();
  }

  set scanCount(value: BigInt) {
    this.set("scanCount", Value.fromBigInt(value));
  }

  get claimCount(): BigInt {
    let value = this.get("claimCount");
    return value.toBigInt();
  }

  set claimCount(value: BigInt) {
    this.set("claimCount", Value.fromBigInt(value));
  }
}

export class ProtocolDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProtocolDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProtocolDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProtocolDay", id.toString(), this);
  }

  static load(id: string): ProtocolDay | null {
    return store.get("ProtocolDay", id) as ProtocolDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get getUsed(): BigInt {
    let value = this.get("getUsed");
    return value.toBigInt();
  }

  set getUsed(value: BigInt) {
    this.set("getUsed", Value.fromBigInt(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get scanCount(): BigInt {
    let value = this.get("scanCount");
    return value.toBigInt();
  }

  set scanCount(value: BigInt) {
    this.set("scanCount", Value.fromBigInt(value));
  }

  get claimCount(): BigInt {
    let value = this.get("claimCount");
    return value.toBigInt();
  }

  set claimCount(value: BigInt) {
    this.set("claimCount", Value.fromBigInt(value));
  }
}

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Event entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Event entity with non-string ID. " + 'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Event", id.toString(), this);
  }

  static load(id: string): Event | null {
    return store.get("Event", id) as Event | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relayer(): string {
    let value = this.get("relayer");
    return value.toString();
  }

  set relayer(value: string) {
    this.set("relayer", Value.fromString(value));
  }

  get getUsed(): BigInt {
    let value = this.get("getUsed");
    return value.toBigInt();
  }

  set getUsed(value: BigInt) {
    this.set("getUsed", Value.fromBigInt(value));
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get shopUrl(): string {
    let value = this.get("shopUrl");
    return value.toString();
  }

  set shopUrl(value: string) {
    this.set("shopUrl", Value.fromString(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    return value.toString();
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Relayer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Relayer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Relayer entity with non-string ID. " + 'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Relayer", id.toString(), this);
  }

  static load(id: string): Relayer | null {
    return store.get("Relayer", id) as Relayer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get getUsed(): BigInt {
    let value = this.get("getUsed");
    return value.toBigInt();
  }

  set getUsed(value: BigInt) {
    this.set("getUsed", Value.fromBigInt(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get scanCount(): BigInt {
    let value = this.get("scanCount");
    return value.toBigInt();
  }

  set scanCount(value: BigInt) {
    this.set("scanCount", Value.fromBigInt(value));
  }

  get claimCount(): BigInt {
    let value = this.get("claimCount");
    return value.toBigInt();
  }

  set claimCount(value: BigInt) {
    this.set("claimCount", Value.fromBigInt(value));
  }

  get events(): Array<string | null> {
    let value = this.get("events");
    return value.toStringArray();
  }

  set events(value: Array<string | null>) {
    this.set("events", Value.fromStringArray(value));
  }

  get relayerDays(): Array<string | null> {
    let value = this.get("relayerDays");
    return value.toStringArray();
  }

  set relayerDays(value: Array<string | null>) {
    this.set("relayerDays", Value.fromStringArray(value));
  }

  get usageEvents(): Array<string | null> {
    let value = this.get("usageEvents");
    return value.toStringArray();
  }

  set usageEvents(value: Array<string | null>) {
    this.set("usageEvents", Value.fromStringArray(value));
  }
}

export class RelayerDay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RelayerDay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RelayerDay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RelayerDay", id.toString(), this);
  }

  static load(id: string): RelayerDay | null {
    return store.get("RelayerDay", id) as RelayerDay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relayer(): string {
    let value = this.get("relayer");
    return value.toString();
  }

  set relayer(value: string) {
    this.set("relayer", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get getUsed(): BigInt {
    let value = this.get("getUsed");
    return value.toBigInt();
  }

  set getUsed(value: BigInt) {
    this.set("getUsed", Value.fromBigInt(value));
  }

  get mintCount(): BigInt {
    let value = this.get("mintCount");
    return value.toBigInt();
  }

  set mintCount(value: BigInt) {
    this.set("mintCount", Value.fromBigInt(value));
  }

  get scanCount(): BigInt {
    let value = this.get("scanCount");
    return value.toBigInt();
  }

  set scanCount(value: BigInt) {
    this.set("scanCount", Value.fromBigInt(value));
  }

  get claimCount(): BigInt {
    let value = this.get("claimCount");
    return value.toBigInt();
  }

  set claimCount(value: BigInt) {
    this.set("claimCount", Value.fromBigInt(value));
  }
}

export class Ticket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Ticket entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Ticket entity with non-string ID. " + 'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Ticket", id.toString(), this);
  }

  static load(id: string): Ticket | null {
    return store.get("Ticket", id) as Ticket | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relayer(): string {
    let value = this.get("relayer");
    return value.toString();
  }

  set relayer(value: string) {
    this.set("relayer", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get state(): string {
    let value = this.get("state");
    return value.toString();
  }

  set state(value: string) {
    this.set("state", Value.fromString(value));
  }

  get url(): string | null {
    let value = this.get("url");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set url(value: string | null) {
    if (value === null) {
      this.unset("url");
    } else {
      this.set("url", Value.fromString(value as string));
    }
  }

  get fuelTankBalance(): BigInt {
    let value = this.get("fuelTankBalance");
    return value.toBigInt();
  }

  set fuelTankBalance(value: BigInt) {
    this.set("fuelTankBalance", Value.fromBigInt(value));
  }
}

export class UsageEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UsageEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UsageEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UsageEvent", id.toString(), this);
  }

  static load(id: string): UsageEvent | null {
    return store.get("UsageEvent", id) as UsageEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get relayer(): string {
    let value = this.get("relayer");
    return value.toString();
  }

  set relayer(value: string) {
    this.set("relayer", Value.fromString(value));
  }

  get nftIndex(): BigInt {
    let value = this.get("nftIndex");
    return value.toBigInt();
  }

  set nftIndex(value: BigInt) {
    this.set("nftIndex", Value.fromBigInt(value));
  }

  get getUsed(): BigInt {
    let value = this.get("getUsed");
    return value.toBigInt();
  }

  set getUsed(value: BigInt) {
    this.set("getUsed", Value.fromBigInt(value));
  }

  get interaction(): string {
    let value = this.get("interaction");
    return value.toString();
  }

  set interaction(value: string) {
    this.set("interaction", Value.fromString(value));
  }
}
