// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import { ethereum, JSONValue, TypedMap, Entity, Bytes, Address, BigInt } from "@graphprotocol/graph-ts";

export class AccessControlSet extends ethereum.Event {
  get params(): AccessControlSet__Params {
    return new AccessControlSet__Params(this);
  }
}

export class AccessControlSet__Params {
  _event: AccessControlSet;

  constructor(event: AccessControlSet) {
    this._event = event;
  }

  get NewAccesscontrol(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BaseConfigured extends ethereum.Event {
  get params(): BaseConfigured__Params {
    return new BaseConfigured__Params(this);
  }
}

export class BaseConfigured__Params {
  _event: BaseConfigured;

  constructor(event: BaseConfigured) {
    this._event = event;
  }

  get baseAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UnderWriterSet extends ethereum.Event {
  get params(): UnderWriterSet__Params {
    return new UnderWriterSet__Params(this);
  }
}

export class UnderWriterSet__Params {
  _event: UnderWriterSet;

  constructor(event: UnderWriterSet) {
    this._event = event;
  }

  get eventAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get underWriterAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class newEventRegistered extends ethereum.Event {
  get params(): newEventRegistered__Params {
    return new newEventRegistered__Params(this);
  }
}

export class newEventRegistered__Params {
  _event: newEventRegistered;

  constructor(event: newEventRegistered) {
    this._event = event;
  }

  get eventAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get getUsed(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get eventName(): string {
    return this._event.parameters[2].value.toString();
  }

  get orderTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class EventMetaData__getEventDataResult {
  value0: Address;
  value1: Address;
  value2: string;
  value3: string;
  value4: string;
  value5: Array<Bytes>;
  value6: Array<BigInt>;
  value7: boolean;
  value8: Array<Bytes>;
  value9: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: string,
    value3: string,
    value4: string,
    value5: Array<Bytes>,
    value6: Array<BigInt>,
    value7: boolean,
    value8: Array<Bytes>,
    value9: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytesArray(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    map.set("value8", ethereum.Value.fromFixedBytesArray(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }
}

export class EventMetaData__returnStructEventResultValue0Struct extends ethereum.Tuple {
  get event_address(): Address {
    return this[0].toAddress();
  }

  get integrator_address(): Address {
    return this[1].toAddress();
  }

  get underwriter_address(): Address {
    return this[2].toAddress();
  }

  get event_name(): string {
    return this[3].toString();
  }

  get shop_url(): string {
    return this[4].toString();
  }

  get image_url(): string {
    return this[5].toString();
  }

  get event_metadata(): Array<Bytes> {
    return this[6].toBytesArray();
  }

  get event_times(): Array<BigInt> {
    return this[7].toBigIntArray();
  }

  get set_aside(): boolean {
    return this[8].toBoolean();
  }

  get extra_data(): Array<Bytes> {
    return this[9].toBytesArray();
  }

  get private_event(): boolean {
    return this[10].toBoolean();
  }

  get created(): boolean {
    return this[11].toBoolean();
  }
}

export class EventMetaData extends ethereum.SmartContract {
  static bind(address: Address): EventMetaData {
    return new EventMetaData("EventMetaData", address);
  }

  contractName(): string {
    let result = super.call("contractName", "contractName():(string)", []);

    return result[0].toString();
  }

  try_contractName(): ethereum.CallResult<string> {
    let result = super.tryCall("contractName", "contractName():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): string {
    let result = super.call("contractVersion", "contractVersion():(string)", []);

    return result[0].toString();
  }

  try_contractVersion(): ethereum.CallResult<string> {
    let result = super.tryCall("contractVersion", "contractVersion():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  doesEventExist(eventAddress: Address): boolean {
    let result = super.call("doesEventExist", "doesEventExist(address):(bool)", [
      ethereum.Value.fromAddress(eventAddress),
    ]);

    return result[0].toBoolean();
  }

  try_doesEventExist(eventAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("doesEventExist", "doesEventExist(address):(bool)", [
      ethereum.Value.fromAddress(eventAddress),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getEventCount(): BigInt {
    let result = super.call("getEventCount", "getEventCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEventCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEventCount", "getEventCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEventData(eventAddress: Address): EventMetaData__getEventDataResult {
    let result = super.call(
      "getEventData",
      "getEventData(address):(address,address,string,string,string,bytes32[4],uint256[2],bool,bytes32[],bool)",
      [ethereum.Value.fromAddress(eventAddress)]
    );

    return new EventMetaData__getEventDataResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBytesArray(),
      result[6].toBigIntArray(),
      result[7].toBoolean(),
      result[8].toBytesArray(),
      result[9].toBoolean()
    );
  }

  try_getEventData(eventAddress: Address): ethereum.CallResult<EventMetaData__getEventDataResult> {
    let result = super.tryCall(
      "getEventData",
      "getEventData(address):(address,address,string,string,string,bytes32[4],uint256[2],bool,bytes32[],bool)",
      [ethereum.Value.fromAddress(eventAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EventMetaData__getEventDataResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBytesArray(),
        value[6].toBigIntArray(),
        value[7].toBoolean(),
        value[8].toBytesArray(),
        value[9].toBoolean()
      )
    );
  }

  getUnderwriterAddress(eventAddress: Address): Address {
    let result = super.call("getUnderwriterAddress", "getUnderwriterAddress(address):(address)", [
      ethereum.Value.fromAddress(eventAddress),
    ]);

    return result[0].toAddress();
  }

  try_getUnderwriterAddress(eventAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("getUnderwriterAddress", "getUnderwriterAddress(address):(address)", [
      ethereum.Value.fromAddress(eventAddress),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isInventoryUnderwritten(eventAddress: Address): boolean {
    let result = super.call("isInventoryUnderwritten", "isInventoryUnderwritten(address):(bool)", [
      ethereum.Value.fromAddress(eventAddress),
    ]);

    return result[0].toBoolean();
  }

  try_isInventoryUnderwritten(eventAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInventoryUnderwritten", "isInventoryUnderwritten(address):(bool)", [
      ethereum.Value.fromAddress(eventAddress),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  returnStructEvent(eventAddress: Address): EventMetaData__returnStructEventResultValue0Struct {
    let result = super.call(
      "returnStructEvent",
      "returnStructEvent(address):((address,address,address,string,string,string,bytes32[4],uint256[2],bool,bytes32[],bool,bool))",
      [ethereum.Value.fromAddress(eventAddress)]
    );

    return result[0].toTuple() as EventMetaData__returnStructEventResultValue0Struct;
  }

  try_returnStructEvent(
    eventAddress: Address
  ): ethereum.CallResult<EventMetaData__returnStructEventResultValue0Struct> {
    let result = super.tryCall(
      "returnStructEvent",
      "returnStructEvent(address):((address,address,address,string,string,string,bytes32[4],uint256[2],bool,bytes32[],bool,bool))",
      [ethereum.Value.fromAddress(eventAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toTuple() as EventMetaData__returnStructEventResultValue0Struct);
  }
}

export class _initialize_metadataCall extends ethereum.Call {
  get inputs(): _initialize_metadataCall__Inputs {
    return new _initialize_metadataCall__Inputs(this);
  }

  get outputs(): _initialize_metadataCall__Outputs {
    return new _initialize_metadataCall__Outputs(this);
  }
}

export class _initialize_metadataCall__Inputs {
  _call: _initialize_metadataCall;

  constructor(call: _initialize_metadataCall) {
    this._call = call;
  }

  get address_bouncer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get address_economics(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get address_fueldepot(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class _initialize_metadataCall__Outputs {
  _call: _initialize_metadataCall;

  constructor(call: _initialize_metadataCall) {
    this._call = call;
  }
}

export class ConfigureBaseCall extends ethereum.Call {
  get inputs(): ConfigureBaseCall__Inputs {
    return new ConfigureBaseCall__Inputs(this);
  }

  get outputs(): ConfigureBaseCall__Outputs {
    return new ConfigureBaseCall__Outputs(this);
  }
}

export class ConfigureBaseCall__Inputs {
  _call: ConfigureBaseCall;

  constructor(call: ConfigureBaseCall) {
    this._call = call;
  }

  get base_address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConfigureBaseCall__Outputs {
  _call: ConfigureBaseCall;

  constructor(call: ConfigureBaseCall) {
    this._call = call;
  }
}

export class RegisterEventCall extends ethereum.Call {
  get inputs(): RegisterEventCall__Inputs {
    return new RegisterEventCall__Inputs(this);
  }

  get outputs(): RegisterEventCall__Outputs {
    return new RegisterEventCall__Outputs(this);
  }
}

export class RegisterEventCall__Inputs {
  _call: RegisterEventCall;

  constructor(call: RegisterEventCall) {
    this._call = call;
  }

  get eventAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get integratorAccountPublicKeyHash(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get eventName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get shopUrl(): string {
    return this._call.inputValues[3].value.toString();
  }

  get imageUrl(): string {
    return this._call.inputValues[4].value.toString();
  }

  get eventMeta(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get eventTimes(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }

  get setAside(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get extraData(): Array<Bytes> {
    return this._call.inputValues[8].value.toBytesArray();
  }

  get isPrivate(): boolean {
    return this._call.inputValues[9].value.toBoolean();
  }
}

export class RegisterEventCall__Outputs {
  _call: RegisterEventCall;

  constructor(call: RegisterEventCall) {
    this._call = call;
  }
}

export class SetAccessControlCall extends ethereum.Call {
  get inputs(): SetAccessControlCall__Inputs {
    return new SetAccessControlCall__Inputs(this);
  }

  get outputs(): SetAccessControlCall__Outputs {
    return new SetAccessControlCall__Outputs(this);
  }
}

export class SetAccessControlCall__Inputs {
  _call: SetAccessControlCall;

  constructor(call: SetAccessControlCall) {
    this._call = call;
  }

  get newAddressBouncer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAccessControlCall__Outputs {
  _call: SetAccessControlCall;

  constructor(call: SetAccessControlCall) {
    this._call = call;
  }
}

export class SetUnderwriterAddressCall extends ethereum.Call {
  get inputs(): SetUnderwriterAddressCall__Inputs {
    return new SetUnderwriterAddressCall__Inputs(this);
  }

  get outputs(): SetUnderwriterAddressCall__Outputs {
    return new SetUnderwriterAddressCall__Outputs(this);
  }
}

export class SetUnderwriterAddressCall__Inputs {
  _call: SetUnderwriterAddressCall;

  constructor(call: SetUnderwriterAddressCall) {
    this._call = call;
  }

  get eventAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get wrappingContract(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetUnderwriterAddressCall__Outputs {
  _call: SetUnderwriterAddressCall;

  constructor(call: SetUnderwriterAddressCall) {
    this._call = call;
  }
}
